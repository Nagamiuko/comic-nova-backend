generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  creator
  user
}

enum ComicStatus {
  ongoing
  completed
  hiatus
}

enum EpisodeType {
  free
  premium
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  isVerified        Boolean        @default(false)
  otp               String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OTP ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  otpExpires        DateTime?
  verificationToken String?
  refreshTokens     RefreshToken[]
  resetToken        String?
  resetTokenExpiry  DateTime?
  profile           Profile?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, token])
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  username    String   @unique
  displayName String?
  avatarUrl   String?
  bio         String?
  accessToken String?
  role        UserRole @default(user)
  coins       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id])
  comics       Comic[]           @relation("AuthorComics")
  bookmarks    Bookmark[]
  comments     Comment[]
  likes        Like[]
  transactions CoinTransaction[]
  followers    Follower[]        @relation("followers")
  following    Follower[]        @relation("following")
}

model Comic {
  id          String      @id @default(uuid())
  title       String
  description String?
  coverUrl1   String[]
  coverUrl2   String[]
  status      ComicStatus @default(ongoing)
  tags        String[]
  viewCount   Int         @default(0)
  likeCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId String?
  author   Profile? @relation("AuthorComics", fields: [authorId], references: [id])

  categorie Categories[] @relation("ComicCategories")
  episodes  Episode[]
  bookmarks Bookmark[]
  likes     Like[]
  rankings  Ranking[]
  comments  Comment[]
}

model Episode {
  id            String      @id @default(uuid())
  comicId       String
  title         String
  episodeNumber Int
  type          EpisodeType @default(free)
  coinCost      Int         @default(0)
  viewCount     Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  contentImages EpisodeImage[] // üîó ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û

  comic        Comic             @relation(fields: [comicId], references: [id])
  bookmarks    Bookmark[]
  comments     Comment[]
  transactions CoinTransaction[]

  @@unique([comicId, episodeNumber])
}

model EpisodeImage {
  id        String @id @default(uuid())
  episodeId String
  imageUrl  String
  order     Int // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3...

  episode Episode @relation(fields: [episodeId], references: [id])

  @@unique([episodeId, order])
  @@index([episodeId])
}

model Categories {
  id     String  @id @default(uuid())
  cid    String
  name   String
  icon   String
  color  String
  count  Int     @default(0)
  comics Comic[] @relation("ComicCategories")
}

model Bookmark {
  id                String  @id @default(uuid())
  profileId         String
  comicId           String
  lastReadEpisodeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile         Profile  @relation(fields: [profileId], references: [id])
  comic           Comic    @relation(fields: [comicId], references: [id])
  lastReadEpisode Episode? @relation(fields: [lastReadEpisodeId], references: [id])

  @@unique([profileId, comicId])
}

model Comment {
  id        String   @id @default(uuid())
  profileId String
  episodeId String?
  content   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile   @relation(fields: [profileId], references: [id])
  episode Episode?  @relation(fields: [episodeId], references: [id])
  parent  Comment?  @relation("ReplyTo", fields: [parentId], references: [id])
  replies Comment[] @relation("ReplyTo")
  Comic   Comic?    @relation(fields: [comicId], references: [id])
  comicId String?

  @@index([parentId])
  @@index([comicId, episodeId, parentId])
}

model Like {
  id        String   @id @default(uuid())
  profileId String
  comicId   String
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
  comic   Comic   @relation(fields: [comicId], references: [id])

  @@unique([profileId, comicId])
}

model CoinTransaction {
  id              String   @id @default(uuid())
  profileId       String
  amount          Int
  transactionType String // e.g. "topup", "purchase"
  description     String?
  episodeId       String?
  createdAt       DateTime @default(now())

  profile Profile  @relation(fields: [profileId], references: [id])
  episode Episode? @relation(fields: [episodeId], references: [id])
}

model Ranking {
  id           String   @id @default(uuid())
  comicId      String
  rankType     String // daily, weekly, monthly, all_time
  rankPosition Int
  scoreValue   Int      @default(0)
  periodStart  DateTime
  periodEnd    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  comic Comic @relation(fields: [comicId], references: [id])

  @@unique([comicId, rankType, periodStart])
}

model Follower {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  Profile  @relation("following", fields: [followerId], references: [id])
  following Profile  @relation("followers", fields: [followingId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}
